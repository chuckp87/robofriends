{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAkBeA,EAhBF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC5B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCuCOK,EA5CE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAiBlB,OACE,6BAECA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCbTW,G,KAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCECI,G,MARA,SAACC,GACd,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,YCiBIC,E,YArBd,WAAYN,GAAQ,IAAD,8BAClB,4CAAMA,KACDO,MAAQ,CACZC,UAAU,GAHO,E,+EAODC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAIG,KAAKJ,MAAMC,SACP,wDAGDG,KAAKX,MAAMK,a,GAlBOQ,aC2GZC,E,YAlDd,aAAe,IAAD,8BACb,+CAkBDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAlBzC,EAAKX,MAAQ,CACZnB,OAAQ,GACRM,YAAa,IAGdyB,QAAQC,IAAI,eAPC,E,iFAUO,IAAD,OAEnBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACxB,OAAQqC,OAEtCN,QAAQC,IAAI,uB,+BAOH,IAAD,EACsBT,KAAKJ,MAA5BnB,EADC,EACDA,OAAQM,EADP,EACOA,YACTgC,EAAiBtC,EAAOuC,QAAQ,SAAAC,GACrC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASpC,EAAYmC,kBAKtD,OAHAV,QAAQC,IAAI,UAGJhC,EAAO2C,OAKd,yBAAK/C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQsC,OARrB,2C,GAxCeb,aCxCEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR,kBAAC,EAAD,MACEC,SAASC,eAAe,SDyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,gBCxHJ/B,a","file":"static/js/main.56922953.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({ name, email, id}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} /> \r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n// bg - background color\r\n// br3 - border\r\n// pa - padding\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t\t//const cardArray = robots.map((user, i) => {\r\n\t\t\t//return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\r\n\t\t\t// when looping, give each item a unique key\r\n\t\t\t// without a key, if some cards get deleted, react virtual DOM won't know which one is which\r\n\t\t\t// and will have to change the entire DOM\r\n\t\t\t// BONUS: each key should be a value that doesn't change\r\n\t\t\t// or have each attribute on its own loke\r\n\t\t\t// return <Card \r\n\t\t\t// \t\t\tkey={i} \r\n\t\t\t// \t\t\tid={robots[i].id} \r\n\t\t\t// \t\t\tname={robots[i].name} \r\n\t\t\t// \t\t\temail={robots[i].email} \r\n\t\t\t// \t\t/>\r\n\t\t//}\r\n\t\t// outside the curley brackets, everything is just JSX .... i.e. <div>\r\n\treturn (\r\n\t\t\t<div>\t\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\t// return (\r\n\t// \t\t<div>\r\n\t// \t\t\t{cardArray} // anything inside the curley brackets is javascript\r\n\t// \t\t</div>\r\n\t// \t);\r\n//\t\t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n//\t\t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n//\t\t<Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n//\t\t{cardArray}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2' >\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n// new REACT thing called 'children' ... every component has a 'children' attribute\r\n\r\nconst Scroll = (props) => {\r\n\t return (\r\n\t \t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n\t \t\t{props.children}\r\n\t \t</div>\r\n\t );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1>Oooops. That is not good</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport '../containers/App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n// In React, STATE, is an object that describes the application\r\n// PROPS are things that come from STATE\r\n// const state = {\r\n// \trobots: robots,\r\n// \tsearchField: ''\r\n// }\r\n\r\n// const App = () => {\r\n// \treturn (\r\n// \t\t<div className='tc'>\r\n// \t\t\t<h1>RoboFriends</h1>\r\n// \t\t\t<SearchBox />\r\n// \t\t\t<CardList robots={robots}/>\r\n// \t\t</div>\r\n// \t);\r\n// }\r\n\r\n// Components that have such things as state and life-cycle hooks are called 'CONTAINERS'\r\n// We can't user a pure function with them because technically they aren't pure; they have state, etc.\r\n// CONTAINERS pass down state to components.\r\n\r\n// REACT lifecycle hooks\r\n// MOUNTING -- The start of the App -- component gets mounted into the document with the id of 'root'\r\n// checks for the presence of the following in order\r\n// \r\n// \tconstructor()\r\n// \tcomponentWillMount()\r\n//  render()\r\n//\tcomponentDidMount()\r\n// \r\n// UPDATING -- when a component changes\r\n//\tcomponentWillReceiveProps()\r\n//\tshouldComponentUpdate()\r\n//\tcomponentWillUpdate()\r\n//\trender()\r\n//\tcomponentDidUpdate()\r\n//\r\n// UNMOUNTING -- when a component is removed from a page\r\n//\tcomponentWillUnmount()\r\n//\r\n\r\n// Component class always calls render function that returns something.\r\n// super() always has to be called before 'this' can be referenced\r\n// This is a SMART component because it has 'state'\r\n// SMART components have the class syntax below\r\nclass App extends Component {\r\n\t\t// \tthis.state = {\r\n\t\t// \trobots: robots,\r\n\t\t// \tsearchfield: ''\r\n\t\t// }\r\n\r\n// robots start with an empty array until it is filled\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\r\n\t\tconsole.log('constructor');\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t// fetch is a method on the Window object\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots: users}));\r\n\t\t//this.setState({robots: robots});\r\n\t\tconsole.log('componentDidMount');\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value}); // Use setState to change a state value\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {robots, searchfield} = this.state;\r\n\t\tconst filteredRobots = robots.filter( robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t});\r\n\t\tconsole.log('render'); \r\n\t\t// Everytime state changes, render gets called .. virtual DOM notices the change and re-renders the page\r\n\r\n\t\treturn !robots.length ?\r\n\r\n\t\t\t<h1>Loading</h1>\r\n\r\n\t\t: (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f2'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\t\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t  );\r\n\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'; // core of the package that does DOM manipulation\r\nimport ReactDOM from 'react-dom'; // react for DOM (websites)\r\nimport './index.css'; // allows adding css for individual components\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n\t<App />\r\n\t, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n\r\nexport default App;"],"sourceRoot":""}